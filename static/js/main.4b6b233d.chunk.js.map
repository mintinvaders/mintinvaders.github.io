{"version":3,"sources":["constants.ts","pages/MintPage/styles.tsx","pages/HomePage/styles.tsx","pages/MintPage/index.tsx","hooks/useCandyMachine.ts","App.tsx","reportWebVitals.ts","index.tsx","utils.ts"],"names":["CANDY_MACHINE_CONFIG","CANDY_MACHINE_UUID","slice","START_DATE","RPC_MAINNET_URL","RPC_DEVNET_URL","NETWORK","WalletAdapterNetwork","Mainnet","WALLETS","getPhantomWallet","getSolflareWallet","getSolletWallet","network","CANDY_MACHINE","PROGRAM_ID","web3","PublicKey","TOKEN_METADATA_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_PROGRAM_ID","INVADERS_STORAGE_MINT_KEY","StyledWalletMultiButton","styled","WalletMultiButton","StyledButton","Button","Input","ImageContainer","Box","MintPage","wallet","useWallet","connection","useConnection","useState","isMinting","setIsMinting","candyMachineState","setCandyMachineState","isPolling","setIsPolling","fetchData","a","fetchCandyMachineState","state","candy","useInterval","startDate","Date","Number","undefined","useEffect","useCandyMachine","handleClick","numMinted","localStorage","getItem","e","toast","error","mint","tx","success","href","getTransactionLink","isExternal","ExternalLink","setItem","String","parseMintError","maxW","textAlign","theme","as","mt","mb","fontWeight","fontSize","base","md","lg","w","display","flexDir","background","className","src","height","rounded","m","color","itemsRedeemed","toNumber","data","itemsAvailable","size","connected","onClick","css","pointerEvents","disabled","mr","pt","injectGlobal","extendTheme","styles","global","body","App","endpoint","getRpcUrl","wallets","autoConnect","featuredWallets","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","getTokenWallet","findProgramAddress","toBuffer","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","Buffer","from","getCandyMachine","config","uuid","getMasterEdition","provider","Provider","signAllTransactions","signTransaction","publicKey","preflightCommitment","Program","fetchIdl","idl","anchorProgram","candyMachine","account","fetch","getMetadata","Keypair","generate","token","metadata","masterEdition","rpc","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","accounts","signers","instructions","mintNft","message","msg","startsWith","split","code","Devnet"],"mappings":"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","file":"static/js/main.4b6b233d.chunk.js","sourcesContent":["import { web3 } from \"@project-serum/anchor\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSolletWallet,\n  getSolflareWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\n// Project Specific Config\nexport const CANDY_MACHINE_CONFIG =\n  \"7Mg1MVpW2n9YR5whXBNUdCUGph3asCJHH7JXMFvnsvKk\";\nexport const CANDY_MACHINE_UUID = CANDY_MACHINE_CONFIG.slice(0, 6);\nexport const START_DATE = 0;\nexport const RPC_MAINNET_URL = \"https://api.mainnet-beta.solana.com\";\nexport const RPC_DEVNET_URL = \"https://api.devnet.solana.com\";\nexport const NETWORK = WalletAdapterNetwork.Mainnet;\nexport const WALLETS = [\n  getPhantomWallet(),\n  getSolflareWallet(),\n  getSolletWallet({ network: NETWORK }),\n];\n\n// Candy Machine Specific Config\nexport const CANDY_MACHINE = \"candy_machine\";\nexport const PROGRAM_ID = new web3.PublicKey(\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\n);\nexport const TOKEN_METADATA_PROGRAM_ID = new web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\nexport const TOKEN_PROGRAM_ID = new web3.PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nexport const INVADERS_STORAGE_MINT_KEY = \"1635867668\";\nexport const WHITELIST = [\n  \"E4S1hs5dwpiUdV3soSDJ5zsdTuCvcdmAuisYUXmmiC1Z\",\n  \"5BZqMHvzvyCZebrQMbFkAQ4nkECjP85iFJqCKMSinBEH\",\n  \"3p6bJymzw93Sta8LJe5BKgmuojRRF9DrqT8gV1yxVn1T\",\n  \"9UVxgNFsYYmCusd1r1G42DDCw5rrwzJYPXSp3xDwhTfu\",\n  \"7YYHQGyQmFd3UkVX64VkhKspFhSdQm18QAQfgEM4CDmj\",\n  \"7LBFC3uTKfcwhAnjTRwfdqZQ4vjeZD8oqKYM8PBHj8wp\",\n  \"Hw82wwwsJqqPUEsFwbCigQmRFAMgSWCKBqD3JRhLWRcR\",\n  \"8sBNLX9UkbzWVSvb1wQj6bbvLE5zP53YT7s4DJ1vZh8f\",\n  \"Gwki2LgAbMXEkgAi4unXrktb5rY9fzQG9Eq2kmH5ooqt\",\n  \"F4C4owGM6TL2AQRDeHcMJAKdRrf48mLtTPRZkyLgHvFK\",\n  \"GBrAisibPD4RJB4YbBsAcAEcYMfEtkWuCTm8HkGzwt7v\",\n  \"CBBUmFb3UkRnZsb93q19vThDHCHuunswPB6TBtfMgMQh\",\n  \"8tfjshqgEBFGRuaQQA5BHvCVnmCbr2K5g5uxCYb1LAFi\",\n  \"5R2MmhLQ6Bo7H2iMKts6Mh41U2yVopTLVzm92Hc8iDHf\",\n  \"3LyLwAbBC28cUTU5cNRdJ25XE47Hxrw5fjjbJ71NwMPh\",\n  \"5AVQVtJHps1GVbMxKpBN5DTWHr9KgLcys4eVzWv5kwN2\",\n  \"3UFZuK6VWRUv9Eijm8Wwnuvaq23H6kZ3MC6BjWFCa5nC\",\n  \"HtL2eUFAGXRqYzvfLDY88CBZ8uFiVZ2LDYs9XmRCJjE5\",\n  \"AiLxn9i5R1HJfyrWnopnyYqJu8AgNYn5WLJE7xT3i8FY\",\n  \"GmoFjjEqykpep2RNSZ4jRLpYJX2mcSy626UTTfSqyhXi\",\n  \"6QD4zkbNYBYk5uzHgnZiVNwTvXW9AwVLXmJW72xwumGH\",\n  \"74dzMkFpMHMSnAW5Gmo2JTh6EGPPUowtoYFo9GAkZcyo\",\n  \"8ozhkmJFQgcSw7V7hGBVqq2ZAhA6mQCtfvrGZZWWGg6N\",\n  \"B9ZcvV4aBDBXxbvEf27zFWNu8KENxZhA3ZYQNFUrhZeT\",\n  \"DrhoY5TJ3E94LA9312jLT5P7Kkrvbw9XByoudminjpaQ\",\n  \"212v2Lm6THxr3kNXX5xxaUV4qSTejfvxCor9eKfehDN2\",\n  \"7S2sWoj3zAuM6HpQnnnEc3K6eXaUFgkHqaHEQD84aeeZ\",\n  \"FWHSgmqh7CLmFmi5tZ1rvdWdETNcLWtmNh7dSy8ntXE5\",\n  \"J7uvC4TwVMPrJJNJZoMkLa5uJGaPGfPqnu9nNEDrquyo\",\n  \"BxDHDxRDDCA4TbEL7Lc98XDNoAwnNPSnpVkqc5o6fbUM\",\n  \"HUeCs4p8uxqNT1VS8VKxhbHNurzpE6MzDPYNZPm4UZuL\",\n  \"8yRdMNXTCqinwyVrJsYEvQHqS4HkiNAaTRkpZ1uYKPFo\",\n  \"6SLj56zt8ue6ZSHkwEvzXaGbcSYJTiX43PBme3SdnZPQ\",\n  \"FzGabxSmtgm7H4KE3JTMjU3mvMztDWsuq5HRaJZsYK5h\",\n  \"Ez1BvVe7LMavfKeTLYq2EQc6nk9gMtbuxhJeiGxNSDGa\",\n  \"ciuMvrXyGorGMaBxHKnrwMERxkVxhaTL1Jp4iJaGHVc\",\n  \"5acqdDoRbhCahs6akguPxtgvR7gLfn2tjf1MYzJm4tfz\",\n  \"2wCDF4HXUuj3k8VPKVKZuWqUd8tisppBiLMi2ZdYQyFx\",\n  \"3x5SP5rjLSdJCnbxWeH8o4zkmkZx4hcvLHLJk1MqchS4\",\n  \"Eq2Ahd31ozdfPwZRcmTY6XL3WsSBfPM5sCEKq5RL7auU\",\n  \"B4FUNbx6svBcCqGaR8pJWPVMinbgVTNPa1yzuXpsHck7\",\n  \"Hhkc8pvvLa3FEztY1m1P8FGWBEhQqG3L5PzmVrh97ic\",\n  \"FKpJveAko7qzGwu6ztGgaY1chrBc4L2mDaaLP5MXQu54\",\n  \"9BTmZTWGmEkR1jDYko5jbHDx8Z6Gi1mfWAh6U8FicaVQ\",\n  \"A1ghe3LEm9GRkSScyFsxQE6c8nMCYouXK1TPEmfLTWmx\",\n  \"7GRo6DkKw1AQf7hjJEbMD52TBNdQWjaDqLFbRTCjcre\",\n  \"47fBCCN89D3xbeLCYfHPiENXreXoovcgEodsyb3hB2eR\",\n  \"BrKCG3B6ThArNtkuoFPiUCFAGLbMN4kSxGgz4W6RBht6\",\n  \"3rRerMoG8UBRW8DwLZ21X1kcPoreBHDAbPyFfKgsyqmZ\",\n  \"ButChvXZkbZShzmJJw8gTiiuHrSwvMv1pMWENjS14DaZ\",\n  \"Bii8RTuuHoqiPU3982iF5K3ELxHR5VsNXHSJAwa6jtpz\",\n  \"2gGgxpzwytKfRFvWgdARQ5Un1dGjsduhF4HFpWBJrHvG\",\n  \"HkRKW9YkDMpCRS4Ud2CnCgGdcTet5sDCudicJfbz3JKv\",\n  \"CSDBEnSPQwciXLNmkyzMT8aBaKa6owBH1ZfZm1zLGzSw\",\n  \"6f45VtmA1hXy54faSvLRC1kRA8aHP6hLwe9LpEJGDPZn\",\n  // \"CsnTDtRNMqVahGLvZAEuoVWME1zdWJaWXkyHjkG7qnUr\",\n];\n","import { WalletMultiButton } from \"@solana/wallet-adapter-react-ui\";\nimport styled from \"@emotion/styled\";\nimport { Button } from \"@chakra-ui/button\";\nimport { Input } from \"@chakra-ui/react\";\n\nexport const StyledWalletMultiButton = styled(WalletMultiButton)`\n  &&& {\n    border-radius: 0;\n    font-family: \"Press Start 2P\", cursive;\n    border: 4px solid #212529;\n    border-image-slice: 2;\n    border-image-width: 2;\n    border-image-repeat: stretch;\n    border-image-source: url('data:image/svg+xml;utf8,<?xml version=\"1.0\" encoding=\"UTF-8\" ?><svg version=\"1.1\" width=\"5\" height=\"5\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2 1 h1 v1 h-1 z M1 2 h1 v1 h-1 z M3 2 h1 v1 h-1 z M2 3 h1 v1 h-1 z\" fill=\"rgb(33,37,41)\" /></svg>');\n    border-image-outset: 2;\n    position: relative;\n    display: inline-block;\n    padding: 6px 8px !important;\n    margin: 4px;\n    text-align: center;\n    vertical-align: middle;\n    cursor: pointer;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    height: unset;\n    line-height: unset;\n    color: #212529;\n    background-color: #fff;\n\n    img,\n    i {\n      display: none;\n    }\n  }\n`;\n\nexport const StyledButton = styled(Button)``;\n\nexport const StyledInput = styled(Input)``;\n\nexport const MaxButton = styled(Button)``;\n","import { Box } from \"@chakra-ui/layout\";\nimport styled from \"@emotion/styled\";\n\nexport const ImageContainer = styled(Box)`\n  &&& {\n    padding: 2px;\n  }\n`;\n","import { Box, Center, Heading, Link, Text, Container } from \"@chakra-ui/react\";\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport { Image } from \"@chakra-ui/image\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { useCandyMachine } from \"../../hooks/useCandyMachine\";\nimport { MintError } from \"../../types\";\nimport { getTransactionLink, mint, parseMintError } from \"../../utils\";\nimport { StyledButton, StyledWalletMultiButton } from \"./styles\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport { ImageContainer } from \"../HomePage/styles\";\nimport { INVADERS_STORAGE_MINT_KEY } from \"../../constants\";\n\nexport default function MintPage() {\n  const wallet = useWallet();\n  const { connection } = useConnection();\n  const { candyMachineState, setIsMinting, isMinting } = useCandyMachine();\n\n  const handleClick = async () => {\n    setIsMinting(true);\n\n    let numMinted = 0;\n    try {\n      numMinted = Number(\n        localStorage.getItem(INVADERS_STORAGE_MINT_KEY) || \"0\"\n      );\n    } catch (e) {}\n\n    if (numMinted === 10) {\n      toast.error(\"Sorry! You have already minted the max of 10.\");\n      setIsMinting(false);\n      return;\n    }\n\n    try {\n      const tx = await mint({ wallet, connection });\n      toast.success(\n        <>\n          Success!{\" \"}\n          <Link href={getTransactionLink(tx as string)} isExternal>\n            View transaction <ExternalLinkIcon />\n          </Link>\n        </>\n      );\n      localStorage.setItem(INVADERS_STORAGE_MINT_KEY, String(numMinted + 1));\n    } catch (e) {\n      const error = parseMintError(e as MintError);\n      toast.error(error);\n    }\n\n    setIsMinting(false);\n  };\n\n  return (\n    <Container maxW=\"full\" textAlign=\"center\">\n      <ToastContainer theme=\"dark\" />\n      <Heading\n        as=\"h1\"\n        mt={10}\n        mb={8}\n        fontWeight={700}\n        fontSize={{ base: 30, md: 40, lg: 60 }}\n        textAlign=\"center\"\n      >\n        Sol Invaders\n      </Heading>\n      <Container w={[\"md\", \"md\", \"xl\"]} mb={12} display=\"flex\" flexDir=\"column\">\n        <Box background=\"whiteAlpha.400\" className=\"nes-container is-rounded\">\n          <Center>\n            <ImageContainer className=\"nes-container is-rounded\" maxW={250}>\n              <Image\n                src=\"images/samples/mystery.png\"\n                height={250}\n                rounded={0}\n              />\n            </ImageContainer>\n          </Center>\n          <Text m={4}>! Welcome to Sol Invaders !</Text>\n          <Text m={4}>Total Invaders Minted:</Text>\n          {candyMachineState ? (\n            <Text color=\"#79FE0C\">\n              {candyMachineState?.itemsRedeemed.toNumber()}/\n              {candyMachineState?.data.itemsAvailable.toNumber()}\n            </Text>\n          ) : (\n            <Spinner size=\"lg\" color=\"#79FE0C\" />\n          )}\n          <Box mt={4}>\n            <StyledWalletMultiButton className=\"nes-btn\" />\n          </Box>\n          {wallet?.connected && (\n            <Box mt={4}>\n              <StyledButton\n                className=\"nes-btn is-primary\"\n                onClick={() => handleClick()}\n                css={{ pointerEvents: isMinting ? \"none\" : \"auto\" }}\n                disabled={isMinting}\n              >\n                {isMinting && <Spinner mr={2} size=\"sm\" />}\n                Mint\n              </StyledButton>\n              <Text color=\"white\" fontSize={12} pt={2}>\n                Minting costs 0.75 SOL\n              </Text>\n            </Box>\n          )}\n        </Box>\n      </Container>\n    </Container>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { useConnection } from \"@solana/wallet-adapter-react\";\nimport { fetchCandyMachineState } from \"../utils\";\nimport { START_DATE } from \"../constants\";\nimport { CandyMachineState } from \"../types\";\nimport { useInterval } from \"react-use\";\n\nexport const useCandyMachine = () => {\n  const [isMinting, setIsMinting] = useState(false);\n  const [candyMachineState, setCandyMachineState] =\n    useState<CandyMachineState>();\n  const { connection } = useConnection();\n  const [isPolling, setIsPolling] = useState(false);\n\n  const fetchData = async () => {\n    setIsPolling(true);\n    try {\n      const state = await fetchCandyMachineState({ connection });\n      setCandyMachineState(state.candy as CandyMachineState);\n    } catch (e) {}\n  };\n\n  useInterval(fetchData, isPolling ? 10e3 : null);\n\n  const startDate = START_DATE\n    ? new Date(Number(START_DATE) * 1000)\n    : undefined;\n\n  useEffect(() => {\n    if (!candyMachineState) fetchData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [candyMachineState, connection]);\n\n  return {\n    candyMachineState,\n    isMinting,\n    setIsMinting,\n    startDate,\n  };\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport { NETWORK, WALLETS } from \"./constants\";\nimport { getRpcUrl } from \"./utils\";\n\n// import HomePage from \"./pages/HomePage\";\n\nimport { extendTheme } from \"@chakra-ui/react\";\n\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { injectGlobal } from \"@emotion/css\";\nimport MintPage from \"./pages/MintPage\";\n\ninjectGlobal`\n  button {\n    cursor: pointer !important;\n  }\n\n  html, body, h1, h2, h3, h4 {\n    cursor: default !important;\n    font-family: 'Press Start 2P', cursive !important;\n  }\n\n  .wallet-adapter-button {\n    font-family: 'Press Start 2P', cursive !important;\n  }\n\n  html { \n    background: url(images/bg.jpeg) no-repeat center center fixed; \n    -webkit-background-size: cover;\n    -moz-background-size: cover;\n    -o-background-size: cover;\n    background-size: cover;\n  }\n`;\n\nconst theme = extendTheme({\n  styles: {\n    global: {\n      body: {\n        color: \"#ffffff\",\n        background: \"transparent\",\n      },\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <ConnectionProvider endpoint={getRpcUrl(NETWORK)}>\n      <WalletProvider wallets={WALLETS} autoConnect>\n        <WalletModalProvider featuredWallets={3}>\n          <ChakraProvider theme={theme}>\n            <Router>\n              <Switch>\n                <Route path=\"/\">\n                  <MintPage />\n                </Route>\n              </Switch>\n            </Router>\n          </ChakraProvider>\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import CSSReset from \"@chakra-ui/css-reset\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CSSReset />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Provider, Program, web3 } from \"@project-serum/anchor\";\nimport { MintLayout, Token } from \"@solana/spl-token\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport * as anchor from \"@project-serum/anchor\";\nimport {\n  SystemProgram,\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  Connection,\n} from \"@solana/web3.js\";\n\nimport {\n  CANDY_MACHINE_CONFIG,\n  CANDY_MACHINE_UUID,\n  CANDY_MACHINE,\n  PROGRAM_ID,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n  RPC_MAINNET_URL,\n  RPC_DEVNET_URL,\n} from \"./constants\";\nimport { MintError } from \"./types\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\n\nconst getTokenWallet = async function (wallet: PublicKey, mint: PublicKey) {\n  return (\n    await web3.PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: PublicKey,\n  payer: PublicKey,\n  walletAddress: PublicKey,\n  splTokenMintAddress: PublicKey\n) => {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nconst getCandyMachine = async (config: anchor.web3.PublicKey, uuid: string) => {\n  return (\n    await PublicKey.findProgramAddress(\n      [Buffer.from(CANDY_MACHINE), config.toBuffer(), Buffer.from(uuid)],\n      PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMasterEdition = async (mint: PublicKey) => {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const fetchCandyMachineState = async ({\n  wallet,\n  connection,\n}: {\n  wallet?: WalletContextState;\n  connection: Connection;\n}) => {\n  const provider = new Provider(\n    connection,\n    wallet\n      ? ({\n          ...wallet.wallet,\n          signAllTransactions: wallet.signAllTransactions,\n          signTransaction: wallet.signTransaction,\n          publicKey: wallet.publicKey,\n        } as anchor.Wallet)\n      : ({} as anchor.Wallet),\n    {\n      preflightCommitment: \"recent\",\n    }\n  );\n\n  const idl = await Program.fetchIdl(PROGRAM_ID, provider);\n  const anchorProgram = new Program(idl, PROGRAM_ID, provider);\n  const config = new web3.PublicKey(CANDY_MACHINE_CONFIG);\n  const candyMachine = await getCandyMachine(config, CANDY_MACHINE_UUID);\n  const candy = await anchorProgram.account.candyMachine.fetch(candyMachine);\n\n  return {\n    provider,\n    idl,\n    anchorProgram,\n    config,\n    candyMachine,\n    candy,\n  };\n};\n\nconst getMetadata = async (mint: PublicKey) => {\n  return (\n    await web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const mint = async ({\n  wallet,\n  connection,\n}: {\n  wallet: WalletContextState;\n  connection: Connection;\n}): Promise<string | undefined> => {\n  const mint = web3.Keypair.generate();\n\n  if (wallet && wallet.wallet && wallet.publicKey) {\n    const token = await getTokenWallet(wallet.publicKey, mint.publicKey);\n    const { provider, anchorProgram, config, candyMachine, candy } =\n      await fetchCandyMachineState({ wallet, connection });\n    const metadata = await getMetadata(mint.publicKey);\n    const masterEdition = await getMasterEdition(mint.publicKey);\n\n    return anchorProgram.rpc.mintNft({\n      accounts: {\n        config: config,\n        candyMachine: candyMachine,\n        payer: wallet.publicKey,\n        // @ts-ignore\n        wallet: candy.wallet,\n        mint: mint.publicKey,\n        metadata,\n        masterEdition,\n        mintAuthority: wallet.publicKey,\n        updateAuthority: wallet.publicKey,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: SYSVAR_RENT_PUBKEY,\n        clock: SYSVAR_CLOCK_PUBKEY,\n      },\n      signers: [mint],\n      instructions: [\n        web3.SystemProgram.createAccount({\n          fromPubkey: wallet.publicKey,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports: await provider.connection.getMinimumBalanceForRentExemption(\n            MintLayout.span\n          ),\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          wallet.publicKey,\n          wallet.publicKey\n        ),\n        createAssociatedTokenAccountInstruction(\n          token,\n          wallet.publicKey,\n          wallet.publicKey,\n          mint.publicKey\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          token,\n          wallet.publicKey,\n          [],\n          1\n        ),\n      ],\n    });\n  }\n};\n\nexport const getPublicKeyDisplay = (publicKey: PublicKey) => {\n  const base58 = publicKey.toBase58();\n  return base58.substr(0, 5) + \"...\" + base58.substr(base58.length - 5);\n};\n\nexport const parseMintError = (error: MintError): string => {\n  let message =\n    error.message || error.msg || \"Minting failed! Please try again!\";\n\n  if (message.startsWith(\"Signature request denied\")) {\n    message = \"Signature request denied! \";\n  } else if (\n    message.startsWith(\n      \"failed to send transaction: Transaction simulation failed: \"\n    )\n  ) {\n    message = message.split(\"failed: \")?.[1];\n  } else if (message.startsWith(\"unknown signer:\")) {\n    message = \"Please make sure to sign with the connected address.\";\n  } else if (error.code === 311) {\n    message = \"Sorry we've sold out!\";\n  } else if (error.code === 312) {\n    message = \"Minting period hasn't started yet.\";\n  } else if (error.code === 309) {\n    message = \"Insufficient funds to mint. Please fund your wallet.\";\n  }\n\n  return message;\n};\n\nexport const getTransactionLink = (tx: string) => `https://solscan.io/tx/${tx}`;\n\nexport const getRpcUrl = (network: WalletAdapterNetwork) => {\n  switch (network) {\n    case WalletAdapterNetwork.Mainnet:\n      return RPC_MAINNET_URL;\n    case WalletAdapterNetwork.Devnet:\n    default:\n      return RPC_DEVNET_URL;\n  }\n};\n"],"sourceRoot":""}